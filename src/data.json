{
  "articles" : [
    {
        "id": "1",
        "title": "Rethinking drag and drop",
        "author": "John Roy",
        "description": "Using connected-components with memoization to ensure the only components that render are the ones that need to — thanks react-redux, reselect and memoize-one.\nAll drag movements are throttled with requestAnimationFrame — thanks raf-schd\nMemoization is used all over the place — thanks memoize-one\nConditionally disabling pointer-events on all draggable items while dragging to prevent the browser needing to do redundant work ",
        "image": ""
    },
    {
      "id": "2",
      "title": "Rethinking drag and drop",
      "author": "James Roy",
      "description": "Using connected-components with memoization to ensure the only components that render are the ones that need to — thanks react-redux, reselect and memoize-one.\nAll drag movements are throttled with requestAnimationFrame — thanks raf-schd\nMemoization is used all over the place — thanks memoize-one\nConditionally disabling pointer-events on all draggable items while dragging to prevent the browser needing to do redundant work ",
      "image": ""
    },
    {
      "id": "3",
      "title": "Rethinking drag and drop",
      "author": "James Roy",
      "description": "Using connected-components with memoization to ensure the only components that render are the ones that need to — thanks react-redux, reselect and memoize-one.\nAll drag movements are throttled with requestAnimationFrame — thanks raf-schd\nMemoization is used all over the place — thanks memoize-one\nConditionally disabling pointer-events on all draggable items while dragging to prevent the browser needing to do redundant work ",
      "image": ""
    },
    {
      "id": "4",
      "title": "Rethinking drag and drop",
      "author": "James Roy",
      "description": "Using connected-components with memoization to ensure the only components that render are the ones that need to — thanks react-redux, reselect and memoize-one.\nAll drag movements are throttled with requestAnimationFrame — thanks raf-schd\nMemoization is used all over the place — thanks memoize-one\nConditionally disabling pointer-events on all draggable items while dragging to prevent the browser needing to do redundant work ",
      "image": ""
    },
    {
      "id": "5",
      "title": "Rethinking drag and drop",
      "author": "James Roy",
      "description": "Using connected-components with memoization to ensure the only components that render are the ones that need to — thanks react-redux, reselect and memoize-one.\nAll drag movements are throttled with requestAnimationFrame — thanks raf-schd\nMemoization is used all over the place — thanks memoize-one\nConditionally disabling pointer-events on all draggable items while dragging to prevent the browser needing to do redundant work ",
      "image": ""
    }
  ]

}
